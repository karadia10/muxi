package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"strings"
)

func main() {
	fset := token.NewFileSet()
	pkgs, err := parser.ParseDir(fset, ".", nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	fmt.Println("// Code generated by muxi discover. DO NOT EDIT.")
	fmt.Println("package main")
	fmt.Println(`import ("reflect"; "github.com/karadia10/muxi")`)
	fmt.Println("func init() {")

	for _, pkg := range pkgs {
		for _, file := range pkg.Files {
			for _, decl := range file.Decls {
				fn, ok := decl.(*ast.FuncDecl)
				if !ok || fn.Doc == nil {
					continue
				}
				for _, comment := range fn.Doc.List {
					line := strings.TrimSpace(strings.TrimPrefix(comment.Text, "//"))
					if strings.HasPrefix(line, "@route") {
						parts := strings.Fields(line)
						if len(parts) < 3 {
							fmt.Fprintf(os.Stderr, "// Invalid annotation for %s\n", fn.Name.Name)
							continue
						}
						path, method := parts[1], strings.Trim(parts[2], "[]")
						handlerName := fn.Name.Name

						if len(fn.Type.Params.List) != 2 || len(fn.Type.Results.List) < 1 {
							fmt.Fprintf(os.Stderr, "// Invalid handler signature for %s\n", handlerName)
							continue
						}
						in := fn.Type.Params.List[1]
						out := fn.Type.Results.List[0]
						inType := exprString(in.Type)
						outType := exprString(out.Type)

						fmt.Printf("\tmuxiApp.RegisterRoute(\"%s\", \"%s\", %s, reflect.TypeOf(%s{}), reflect.TypeOf(%s{}))\n",
							path, method, handlerName, inType, outType)
					}
				}
			}
		}
	}
	fmt.Println("}")
}

func exprString(expr ast.Expr) string {
	switch t := expr.(type) {
	case *ast.Ident:
		return t.Name
	case *ast.SelectorExpr:
		return exprString(t.X) + "." + t.Sel.Name
	case *ast.StarExpr:
		return exprString(t.X)
	case *ast.ArrayType:
		return "[]" + exprString(t.Elt)
	default:
		return ""
	}
}

